import torch
from torch import nn

from base import BaseGanCriterion


# Adapted from https://github.com/gpeyre/SinkhornAutoDiff
class SinkhornDistance(nn.Module):
    r"""
    Given two empirical measures each with :math:`P_1` locations
    :math:`x\in\mathbb{R}^{D_1}` and :math:`P_2` locations :math:`y\in\mathbb{R}^{D_2}`,
    outputs an approximation of the regularized OT cost for point clouds.
    Args:
        eps (float): regularization coefficient
        max_iter (int): maximum number of Sinkhorn iterations
        reduction (string, optional): Specifies the reduction to apply to the output:
            'none' | 'mean' | 'sum'. 'none': no reduction will be applied,
            'mean': the sum of the output will be divided by the number of
            elements in the output, 'sum': the output will be summed. Default: 'none'
    Shape:
        - Input: :math:`(N, P_1, D_1)`, :math:`(N, P_2, D_2)`
        - Output: :math:`(N)` or :math:`()`, depending on `reduction`
    """

    FloatTensor = torch.cuda.FloatTensor if torch.cuda.is_available() else torch.FloatTensor
    LongTensor = torch.cuda.LongTensor if torch.cuda.is_available() else torch.LongTensor

    def __init__(self, eps, max_iter, reduction='none', p=2):
        super(SinkhornDistance, self).__init__()
        self.eps = eps
        self.max_iter = max_iter
        self.reduction = reduction
        self.p = p

    def forward(self, x, y):

        def M(u, v):
            "Modified cost for logarithmic updates"
            "$M_{ij} = (-c_{ij} + u_i + v_j) / \epsilon$"
            return (-C + u.unsqueeze(-1) + v.unsqueeze(-2)) / self.eps

        def _cost_matrix(x, y, p=2):
            "Returns the matrix of $|x_i-y_j|^p$."
            x_col = x.unsqueeze(-2)
            y_lin = y.unsqueeze(-3)
            C = (torch.abs(x_col - y_lin)) ** p
            C = torch.sum(C, -1)
            return C

        # The Sinkhorn algorithm takes as input three variables :
        C = _cost_matrix(x, y, self.p)  # Wasserstein cost function
        x_points = x.shape[-2]
        y_points = y.shape[-2]

        if x.dim() == 2:
            batch_size = 1
        else:
            batch_size = x.shape[0]

        # both marginals are fixed with equal weights
        mu = torch.empty(batch_size, x_points, dtype=torch.float,
                         requires_grad=False).fill_(1.0 / x_points).squeeze().type(self.FloatTensor)
        nu = torch.empty(batch_size, y_points, dtype=torch.float,
                         requires_grad=False).fill_(1.0 / y_points).squeeze().type(self.FloatTensor)

        u = torch.zeros_like(mu)
        v = torch.zeros_like(nu)
        # To check if algorithm terminates because of threshold
        # or max iterations reached
        actual_nits = 0
        # Stopping criterion
        thresh = 1e-9
        with torch.no_grad():
            # Sinkhorn iterations
            for _ in range(self.max_iter):
                u1 = u  # useful to check the update
                u = self.eps * (torch.log(mu + 1e-8) - torch.logsumexp(M(u, v), dim=-1)) + u
                v = self.eps * (torch.log(nu + 1e-8) - torch.logsumexp(M(u, v).transpose(-2, -1), dim=-1)) + v
                err = (u - u1).abs().sum(-1).mean()

                actual_nits += 1
                if err.item() < thresh:
                    break

            U, V = u, v
        # Transport plan pi = diag(a)*K*diag(b)
        pi = torch.exp(M(U, V))

        # Sinkhorn distance
        cost = torch.sum(pi * C, dim=(-2, -1))

        if self.reduction == 'mean':
            cost = cost.mean()
        elif self.reduction == 'sum':
            cost = cost.sum()

        return cost, pi, C

    @staticmethod
    def ave(u, u1, tau):
        "Barycenter subroutine, used by kinetic acceleration through extrapolation."
        return tau * u + (1 - tau) * u1


class Critic(BaseGanCriterion):
    def __init__(self, parent, regularization=None, **kwargs):
        super().__init__(parent=parent, regularization=regularization, **kwargs)

        self.fn_loss = SinkhornDistance(eps=self.configs['eps'],
                                        max_iter=self.configs['n_iter'],
                                        reduction=self.configs['reduction'],
                                        p=self.configs['p'])

    def calculate(self, z, x, y):
        # Check D with real data
        critic_real = self.model["critic"](x)

        # Check D with fake data generated by G
        gen_x = self.model["generator"](z)
        critic_fake = self.model["critic"](gen_x)

        # calculate criterion
        loss_real_fake = self.fn_loss(critic_real, critic_fake)
        loss_real_realv = self.fn_loss(critic_real, critic_real)
        loss_fake_fakev = self.fn_loss(critic_fake, critic_fake)

        loss = self.Tensor.MoneFloat * (2 * loss_real_fake[0] - loss_real_realv[0] - loss_fake_fakev[0])

        # Return dict for regularization parameters
        reg_params = dict(
            network=self.model['critic'],
            real_data=x,
            fake_data=gen_x,
            critic_real=critic_real,
            critic_fake=critic_fake,
        )
        loss_scalar = {
            "critic_loss_xy": loss_real_fake[0],
            "critic_loss_xx": loss_real_realv[0],
            "critic_loss_yy": loss_real_realv[0]
        }
        histogram = {
            "critic_pi_xy": loss_real_fake[1],
            "critic_pi_xx": loss_real_realv[1],
            "critic_pi_yy": loss_real_realv[1]
        }
        self.logger(Scalar=loss_scalar, Histogram=histogram)
        return loss, reg_params


class Generator(BaseGanCriterion):
    def __init__(self, parent, regularization=None, **kwargs):
        super().__init__(parent=parent, regularization=regularization, **kwargs)

        self.fn_loss = SinkhornDistance(eps=self.configs['eps'],
                                        max_iter=self.configs['n_iter'],
                                        reduction=self.configs['reduction'],
                                        p=self.configs['p'])

    def calculate(self, z, x, y):
        # Check D with real data
        critic_real = self.model["critic"](x)

        # Check D with fake data generated by G
        gen_x = self.model["generator"](z)
        critic_fake = self.model["critic"](gen_x)

        # calculate criterion
        loss_real_fake = self.fn_loss(critic_real, critic_fake)
        loss_real_realv = self.fn_loss(critic_real, critic_real)
        loss_fake_fakev = self.fn_loss(critic_fake, critic_fake)

        loss = 2 * loss_real_fake[0] - loss_real_realv[0] - loss_fake_fakev[0]

        # Return dict for regularization parameters
        reg_params = dict(
            network=self.model['generator'],
            real_data=x,
            fake_data=gen_x,
            critic_real=critic_real,
            critic_fake=critic_fake,
        )
        loss_scalar = {
            "generator_loss_xy": loss_real_fake[0],
            "generator_loss_xx": loss_real_realv[0],
            "generator_loss_yy": loss_real_realv[0]
        }
        histogram = {
            "generator_pi_xy": loss_real_fake[1],
            "generator_pi_xx": loss_real_realv[1],
            "generator_pi_yy": loss_real_realv[1]
        }
        self.logger(Scalar=loss_scalar, Histogram=histogram)
        return loss, reg_params
