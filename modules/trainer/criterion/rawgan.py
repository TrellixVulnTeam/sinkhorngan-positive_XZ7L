import torch

from base import BaseGanCriterion


class Critic(BaseGanCriterion):
    def calculate(self, z, x, y):
        # Check D with real data
        critic_real = self.model["critic"](x)

        # Check D with fake data generated by G
        gen_x = self.model["generator"](z)
        critic_fake = self.model["critic"](gen_x)

        real_loss = critic_real - critic_fake.mean(0, keepdim=True)
        fake_loss = critic_fake - critic_real.mean(0, keepdim=True)

        loss = torch.mean(fake_loss) - torch.mean(real_loss)

        # Return dict for regularization parameters
        reg_params = dict(
            network=self.model['critic'],
            real_data=x,
            fake_data=gen_x,
            critic_real=critic_real,
            critic_fake=critic_fake,
        )
        return loss, reg_params


class Generator(BaseGanCriterion):
    def calculate(self, z, x, y):
        # Check D with real data
        critic_real = self.model["critic"](x)

        # Check D with fake data generated by G
        gen_x = self.model["generator"](z)
        critic_fake = self.model["critic"](gen_x)

        fake_loss = -torch.mean(critic_fake - critic_real.mean(0, keepdim=True))

        loss = fake_loss

        # Return dict for regularization parameters
        reg_params = dict(
            network=self.model['generator'],
            real_data=x,
            fake_data=gen_x,
            critic_real=critic_real,
            critic_fake=critic_fake,
        )
        return loss, reg_params
